{"version":3,"sources":["components/ModButton.js","components/SingleDice.js","components/Backdrop.js","components/RollHistory.js","utils/conversionUtils.js","utils/rollUtils.js","utils/config.js","redux/rollSlice.js","components/VDice.js","components/Credit.js","components/SelectView.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["ModButton","props","useState","value","setValue","className","name","onClick","min","cbValue","SingleDice","rollSettings","rollDice","dSide","dNumber","rollMod","rollCounter","Backdrop","HistoryContainer","styled","div","RowCell","p","RowCellBold","SingleRow","RollHistory","allRolls","slice","reverse","map","el","rollNumber","timestamp","toLocaleTimeString","diceTypeString","total","rollsString","getTime","convertRollArrayToString","arr","str","i","length","getRandomIntInclusive","max","Math","ceil","floor","random","DEFAULT_DICE_SET","rollSlice","createSlice","initialState","rolls","reducers","addRoll","state","action","payload","advanceRoll","actions","Title","h1","ModContainer","VDice","setDNumber","setRollMod","rollResult","setRollResult","diceArray","dispatch","useDispatch","useSelector","roll","result","rollModStr","push","Date","generateRoll","id","element","StyledLink","a","StyledP","CreditDiv","Credit","href","target","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","rollReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.879a06e0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./css/ModButton.css\";\r\n\r\nconst ModButton = props => {\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  let incValue = min => {\r\n    if (min === false) {\r\n      setValue(value + 1);\r\n      props.cbValue(value + 1);\r\n    } else {\r\n      if (value + 1 >= min) {\r\n        setValue(value + 1);\r\n        props.cbValue(value + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  let decValue = min => {\r\n    if (min === false) {\r\n      setValue(value - 1);\r\n      props.cbValue(value - 1);\r\n    } else {\r\n      if (value - 1 >= min) {\r\n        setValue(value - 1);\r\n        props.cbValue(value - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ModButton\">\r\n      <h1>{props.name}</h1>\r\n      <div className=\"Controls\">\r\n        <button onClick={() => decValue(props.min)}>-</button>\r\n        <div>{value}</div>\r\n        <button onClick={() => incValue(props.min)}>+</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModButton;\r\n","import React from \"react\";\r\nimport \"./css/SingleDice.css\";\r\n\r\nconst SingleDice = props => {\r\n  return (\r\n    <button\r\n      className=\"SingleDice\"\r\n      onClick={() => {\r\n        props.rollSettings.rollDice(\r\n          props.dSide,\r\n          props.rollSettings.dNumber,\r\n          props.rollSettings.rollMod,\r\n          props.rollSettings.rollCounter\r\n        );\r\n      }}\r\n    >\r\n      d{props.dSide}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SingleDice;\r\n","import React from \"react\";\r\nimport \"./css/Backdrop.css\";\r\n\r\nconst Backdrop = props => {\r\n  return <div className=\"backdrop image\"></div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HistoryContainer = styled.div`\r\n  height: 30vh;\r\n  overflow: auto;\r\n  border: 1px solid white;\r\n  padding: 5px;\r\n  width: 90%;\r\n  @media screen and (min-width: 300px) and (max-width: 1000px) {\r\n    width: 80%;\r\n    height: 20vh;\r\n  }\r\n`;\r\n\r\nconst RowCell = styled.p``;\r\n\r\nconst RowCellBold = styled.p`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst SingleRow = styled.div`\r\n  display: grid;\r\n  border: 1px solid white;\r\n  margin: 3px;\r\n  grid-template-columns: 1fr 2fr 2fr 1fr 4fr;\r\n\r\n  > * {\r\n    font-family: UbuntuMono;\r\n    padding: 5px;\r\n    font-size: 0.7em;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media screen and (min-width: 300px) and (max-width: 1000px) {\r\n      padding: 0px;\r\n      margin: 0px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const RollHistory = props => {\r\n  return (\r\n    <HistoryContainer>\r\n      <SingleRow>\r\n        <RowCell>No</RowCell>\r\n        <RowCell>Timestamp</RowCell>\r\n        <RowCell>Roll type</RowCell>\r\n        <RowCellBold>Result</RowCellBold>\r\n        <RowCell>Single rolls</RowCell>\r\n      </SingleRow>\r\n      {props.allRolls\r\n        .slice(0)\r\n        .reverse()\r\n        .map(el => (\r\n          <SingleRow key={el.timestamp.getTime()}>\r\n            <RowCell>{el.rollNumber}</RowCell>\r\n            <RowCell>{el.timestamp.toLocaleTimeString()}</RowCell>\r\n            <RowCell>{el.diceTypeString}</RowCell>\r\n            <RowCellBold>{el.total}</RowCellBold>\r\n            <RowCell>{el.rollsString}</RowCell>\r\n          </SingleRow>\r\n        ))}\r\n    </HistoryContainer>\r\n  );\r\n};\r\n","export const convertRollArrayToString = (arr) => {\r\n  let str = ''\r\n  for (let i = 0; i < arr.length; i++) {\r\n    str += `${arr[i]}, `\r\n  }\r\n  return str.slice(0, -2)\r\n}","import {convertRollArrayToString} from '../utils/conversionUtils'\r\n\r\n\r\nexport const generateRoll = (dSide, dNumber, rollMod, rollCounter) => {\r\n  let result = 0\r\n  let rolls = []\r\n  let rollModStr = ''\r\n  for (let i = 1; i <= dNumber; i++) {\r\n    rolls.push(getRandomIntInclusive(1, dSide))\r\n    result += rolls[rolls.length - 1]\r\n  }\r\n  result += rollMod\r\n  if (rollMod === 0) {\r\n    rollModStr = \"\"\r\n  } else if (rollMod > 0) {\r\n    rollModStr = `+${rollMod}`\r\n  } else if (rollMod < 0) {\r\n    rollModStr = `${rollMod}`\r\n  }\r\n\r\n  return {\r\n    timestamp: new Date(),\r\n    total: result,\r\n    rolls: rolls,\r\n    rollNumber: rollCounter,\r\n    rollsString: convertRollArrayToString(rolls),\r\n    diceTypeString: `${dNumber}d${dSide}${rollModStr}`\r\n  }\r\n}\r\n\r\n  // https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n  function getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }","export const DEFAULT_DICE_SET = [4, 6, 8, 10, 12, 20, 100]","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const rollSlice = createSlice({\r\n  name: 'roll',\r\n  initialState: {\r\n    rolls: [],\r\n    rollCounter: 1,\r\n  },\r\n  reducers: {\r\n    addRoll: (state, action) => {\r\n      state.rolls = [...state.rolls, action.payload]\r\n    },\r\n    advanceRoll: (state) => {\r\n      state.rollCounter += 1;\r\n    }\r\n    \r\n  }\r\n})\r\n\r\nexport const {addRoll, advanceRoll} = rollSlice.actions\r\n\r\nexport default rollSlice.reducer","import React, { useState } from \"react\";\r\nimport ModButton from \"./ModButton\";\r\nimport SingleDice from \"./SingleDice\";\r\nimport Backdrop from \"./Backdrop\";\r\nimport { RollHistory } from \"./RollHistory\"\r\nimport { generateRoll } from \"../utils/rollUtils\";\r\nimport { DEFAULT_DICE_SET } from \"../utils/config\"\r\nimport \"./css/VDice.css\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addRoll, advanceRoll } from \"../redux/rollSlice\";\r\n\r\nconst Title = styled.h1`\r\n  margin-top: 10px;\r\n  text-align: center;\r\n  line-height: 50px;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  font-size: 2em;\r\n  user-select: none;\r\n`;\r\n\r\nconst ModContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: rows;\r\n  vertical-align: middle;\r\n  @media screen and (min-width: 300px) and (max-width: 1000px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst VDice = props => {\r\n  const [dNumber, setDNumber] = useState(1);\r\n  const [rollMod, setRollMod] = useState(0);\r\n  const [rollResult, setRollResult] = useState(\"\");\r\n  const [diceArray, setDiceArray] = useState(DEFAULT_DICE_SET);\r\n\r\n  const dispatch = useDispatch()\r\n  const allRolls = useSelector((state) => state.roll.rolls)\r\n\r\n  const rollSettings = {\r\n    rollMod: rollMod,\r\n    dNumber: dNumber,\r\n    rollCounter: useSelector((state) => state.roll.rollCounter),\r\n    rollDice: (dSide, dNumber, rollMod, rollCounter) => {\r\n      let result = generateRoll(dSide, dNumber, rollMod, rollCounter)\r\n      dispatch(addRoll(result))\r\n      dispatch(advanceRoll())\r\n      setRollResult(result);\r\n    }\r\n  };\r\n\r\n  const resetDiceSet = () => {\r\n    setDiceArray(DEFAULT_DICE_SET);\r\n  };\r\n\r\n  return (\r\n    <div className=\"VDice\">\r\n      <Title>Virtual dice</Title>\r\n      <div className=\"RollResults\">\r\n        <p>{rollResult.diceTypeString}&nbsp;</p>\r\n        <p id=\"DiceTotal\">{rollResult.total}&nbsp;</p>\r\n        <p id=\"DiceRolls\">{rollResult.rollsString}&nbsp;</p>\r\n      </div>\r\n      {diceArray.map(element => (\r\n        <SingleDice dSide={element} rollSettings={rollSettings}></SingleDice>\r\n      ))}\r\n      <ModContainer>\r\n        <ModButton\r\n          name={\"Set number of dice\"}\r\n          value={dNumber}\r\n          cbValue={setDNumber}\r\n          min={1}\r\n        ></ModButton>\r\n        <ModButton\r\n          name={\"Set roll modification\"}\r\n          value={rollMod}\r\n          cbValue={setRollMod}\r\n          min={false}\r\n        ></ModButton>\r\n      </ModContainer>\r\n      <RollHistory allRolls={allRolls}/>\r\n      <Backdrop />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VDice;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledLink = styled.a`\r\n  font-family: UbuntuMono;\r\n  font-size: 0.6em;\r\n  text-decoration: none;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  :hover {\r\n    color: rgba(255, 255, 255, 1);\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  font-size: 0.6em;\r\n  text-decoration: none;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  display: inline;\r\n`;\r\n\r\nconst CreditDiv = styled.div`\r\n  text-align: right;\r\n  position: absolute;\r\n  bottom: 0.5vw;\r\n  right: 0.5vw;\r\n  @media screen and (min-width: 300px) and (max-width: 1000px) {\r\n    position: static;\r\n    width: 100%;\r\n    text-align: right;\r\n    vertical-align: bottom;\r\n  }\r\n`;\r\n\r\nconst Credit = () => {\r\n  return (\r\n    <CreditDiv>\r\n      <StyledLink\r\n        href=\"https://wallpapersmug.com/w/download/1920x1080/cyberpunk-city-buildings-art-13377a25488\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        background art source\r\n      </StyledLink>\r\n      <StyledP> | </StyledP>\r\n      <StyledLink\r\n        href=\"https://github.com/trailblazingfive\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        app by trailblazingfive 2021\r\n      </StyledLink>\r\n    </CreditDiv>\r\n  );\r\n};\r\n\r\nexport default Credit;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SelectViewContainer = styled.div`\r\n  display: flexbox;\r\n  flex-direction: rows;\r\n  vertical-align: middle;\r\n  padding: 5px;\r\n  width: 50%;\r\n`;\r\n\r\nconst ViewButton = styled.div`\r\n  background: black;\r\n  border-radius: 2px;\r\n  border: 2px white solid;\r\n  padding: 10px;\r\n  width: 100px;\r\n  :hover {\r\n    background: white;\r\n    color: black;\r\n    border: 2px black solid;\r\n  }\r\n`;\r\n\r\nconst SelectView = props => {\r\n  return (\r\n    <SelectViewContainer>\r\n      <ViewButton>Dice roll</ViewButton>\r\n      <ViewButton>History</ViewButton>\r\n    </SelectViewContainer>\r\n  );\r\n};\r\n\r\nexport default SelectView;\r\n","import './App.css';\r\nimport VDice from './components/VDice'\r\nimport SelectView from './components/SelectView'\r\nimport Credit from \"./components/Credit\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <SelectView></SelectView> */}\r\n      <VDice></VDice>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport rollReducer from '../redux/rollSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    roll: rollReducer,\r\n  },\r\n})","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport Credit from \"./components/Credit\"\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <Credit />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}