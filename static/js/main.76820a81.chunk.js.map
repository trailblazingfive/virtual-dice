{"version":3,"sources":["components/ModButton.js","components/SingleDice.js","components/Backdrop.js","components/Credit.js","utils/conversionUtils.js","utils/rollUtils.js","utils/config.js","components/VDice.js","components/SelectView.js","App.js","reportWebVitals.js","index.js"],"names":["ModButton","props","useState","value","setValue","className","name","onClick","min","cbValue","SingleDice","rollSettings","rollDice","dSide","dNumber","rollMod","Backdrop","StyledLink","styled","a","StyledP","p","CreditDiv","div","Credit","href","target","rel","convertRollArrayToString","arr","str","i","length","slice","getRandomIntInclusive","max","Math","ceil","floor","random","DEFAULT_DICE_SET","Title","h1","ModContainer","VDice","setDNumber","setRollMod","rollResult","setRollResult","diceArray","result","rolls","rollModStr","push","total","rollsStr","diceTypeStr","generateRoll","id","map","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UA0CeA,EAvCG,SAAAC,GAAU,IAAD,EACCC,mBAASD,EAAME,OADhB,mBAClBA,EADkB,KACXC,EADW,KA2BzB,OACE,sBAAKC,UAAU,YAAf,UACE,6BAAKJ,EAAMK,OACX,sBAAKD,UAAU,WAAf,UACE,wBAAQE,QAAS,WAhBR,IAAAC,IACD,KADCA,EAgBuBP,EAAMO,MAXpCL,EAAQ,GAAKK,KAHjBJ,EAASD,EAAQ,GACjBF,EAAMQ,QAAQN,EAAQ,KAapB,eACA,8BAAMA,IACN,wBAAQI,QAAS,WA9BR,IAAAC,IACD,KADCA,EA8BuBP,EAAMO,MAzBpCL,EAAQ,GAAKK,KAHjBJ,EAASD,EAAQ,GACjBF,EAAMQ,QAAQN,EAAQ,KA2BpB,sBChBOO,G,MAjBI,SAAAT,GACjB,OACE,yBACEI,UAAU,aACVE,QAAS,WACPN,EAAMU,aAAaC,SACjBX,EAAMY,MACNZ,EAAMU,aAAaG,QACnBb,EAAMU,aAAaI,UANzB,cAUId,EAAMY,WCRCG,G,MAJE,SAAAf,GACf,OAAO,qBAAKI,UAAU,qB,OCDlBY,EAAaC,IAAOC,EAAV,6LAUVC,EAAUF,IAAOG,EAAV,yJAQPC,EAAYJ,IAAOK,IAAV,mFA4BAC,EAtBA,WACb,OACE,eAACF,EAAD,WACE,cAACL,EAAD,CACEQ,KAAK,0FACLC,OAAO,SACPC,IAAI,sBAHN,mCAOA,cAACP,EAAD,kBACA,cAACH,EAAD,CACEQ,KAAK,sCACLC,OAAO,SACPC,IAAI,sBAHN,8CCtCOC,EAA2B,SAACC,GAEvC,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC9BD,GAAG,UAAOD,EAAIE,GAAX,MAEL,OAAOD,EAAIG,MAAM,GAAI,ICuBrB,SAASC,EAAsB1B,EAAK2B,GAGlC,OAFA3B,EAAM4B,KAAKC,KAAK7B,GAChB2B,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAM3B,EAAM,IAAMA,EC/BlD,I,QAAMgC,EAAmB,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,KCUhDC,G,MAAQvB,IAAOwB,GAAV,qLAULC,EAAezB,IAAOK,IAAV,sMA0DHqB,EAjDD,SAAA3C,GAAU,IAAD,EACSC,mBAAS,GADlB,mBACdY,EADc,KACL+B,EADK,OAES3C,mBAAS,GAFlB,mBAEda,EAFc,KAEL+B,EAFK,OAGe5C,mBAAS,IAHxB,mBAGd6C,EAHc,KAGFC,EAHE,OAIa9C,mBAASsC,GAJtB,mBAIdS,EAJc,KAMftC,GANe,KAMA,CACnBI,QAASA,EACTD,QAASA,EACTF,SAAU,SAACC,EAAOC,EAASC,GACzBiC,EFrCsB,SAACnC,EAAOC,EAASC,GAI3C,IAHA,IAAImC,EAAS,EACTC,EAAQ,GACRC,EAAa,GACRrB,EAAI,EAAGA,GAAKjB,EAASiB,IAC5BoB,EAAME,KAAKnB,EAAsB,EAAGrB,IACpCqC,GAAUC,EAAMA,EAAMnB,OAAS,GAWjC,OATAkB,GAAUnC,EACM,IAAZA,EACFqC,EAAa,GACJrC,EAAU,EACnBqC,EAAU,WAAOrC,GACRA,EAAU,IACnBqC,EAAU,UAAMrC,IAGX,CACLuC,MAAOJ,EACPC,MAAOA,EACPI,SAAU3B,EAAyBuB,GACnCK,YAAY,GAAD,OAAK1C,EAAL,YAAgBD,GAAhB,OAAwBuC,IEgBnBK,CAAa5C,EAAOC,EAASC,OAQ/C,OACE,sBAAKV,UAAU,QAAf,UACE,cAACoC,EAAD,2BACA,sBAAKpC,UAAU,cAAf,UACE,4BAAI0C,EAAWS,cACf,mBAAGE,GAAG,YAAN,SAAmBX,EAAWO,QAC9B,mBAAGI,GAAG,YAAN,SAAmBX,EAAWQ,cAE/BN,EAAUU,KAAI,SAAAC,GAAO,OACpB,cAAC,EAAD,CAAY/C,MAAO+C,EAASjD,aAAcA,OAE5C,eAACgC,EAAD,WACE,cAAC,EAAD,CACErC,KAAM,qBACNH,MAAOW,EACPL,QAASoC,EACTrC,IAAK,IAEP,cAAC,EAAD,CACEF,KAAM,wBACNH,MAAOY,EACPN,QAASqC,EACTtC,KAAK,OAGT,cAAC,EAAD,IACA,cAAC,EAAD,QCtEsBU,IAAOK,IAAV,qIAQNL,IAAOK,IAAV,kOCEDsC,MATf,WACE,OACE,qBAAKxD,UAAU,MAAf,SAEE,cAAC,EAAD,OCISyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76820a81.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./css/ModButton.css\";\r\n\r\nconst ModButton = props => {\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  let incValue = min => {\r\n    if (min === false) {\r\n      setValue(value + 1);\r\n      props.cbValue(value + 1);\r\n    } else {\r\n      if (value + 1 >= min) {\r\n        setValue(value + 1);\r\n        props.cbValue(value + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  let decValue = min => {\r\n    if (min === false) {\r\n      setValue(value - 1);\r\n      props.cbValue(value - 1);\r\n    } else {\r\n      if (value - 1 >= min) {\r\n        setValue(value - 1);\r\n        props.cbValue(value - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ModButton\">\r\n      <h1>{props.name}</h1>\r\n      <div className=\"Controls\">\r\n        <button onClick={() => decValue(props.min)}>-</button>\r\n        <div>{value}</div>\r\n        <button onClick={() => incValue(props.min)}>+</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModButton;\r\n","import React from \"react\";\r\nimport \"./css/SingleDice.css\";\r\n\r\nconst SingleDice = props => {\r\n  return (\r\n    <button\r\n      className=\"SingleDice\"\r\n      onClick={() => {\r\n        props.rollSettings.rollDice(\r\n          props.dSide,\r\n          props.rollSettings.dNumber,\r\n          props.rollSettings.rollMod\r\n        );\r\n      }}\r\n    >\r\n      d{props.dSide}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SingleDice;\r\n","import React from \"react\";\r\nimport \"./css/Backdrop.css\";\r\n\r\nconst Backdrop = props => {\r\n  return <div className=\"backdrop image\"></div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledLink = styled.a`\r\n  font-size: 0.5em;\r\n  text-align: right;\r\n  text-decoration: none;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  :hover {\r\n    color: rgba(255, 255, 255, 0.95);\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  font-size: 0.5em;\r\n  text-align: right;\r\n  text-decoration: none;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  display: inline;\r\n`;\r\n\r\nconst CreditDiv = styled.div`\r\n  position: fixed;\r\n  bottom: 0.5vw;\r\n  right: 0.5vw;\r\n`;\r\n\r\nconst Credit = () => {\r\n  return (\r\n    <CreditDiv>\r\n      <StyledLink\r\n        href=\"https://wallpapersmug.com/w/download/1920x1080/cyberpunk-city-buildings-art-13377a25488\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        background art source\r\n      </StyledLink>\r\n      <StyledP> | </StyledP>\r\n      <StyledLink\r\n        href=\"https://github.com/trailblazingfive\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        app by trailblazingfive 2021\r\n      </StyledLink>\r\n    </CreditDiv>\r\n  );\r\n};\r\n\r\nexport default Credit;\r\n","export const convertRollArrayToString = (arr) => {\r\n  let str = ''\r\n  for (let i = 0; i < arr.length; i++) {\r\n    str += `${arr[i]}, `\r\n  }\r\n  return str.slice(0, -2)\r\n}","import {convertRollArrayToString} from '../utils/conversionUtils'\r\n\r\nexport const generateRoll = (dSide, dNumber, rollMod) => {\r\n  let result = 0\r\n  let rolls = []\r\n  let rollModStr = ''\r\n  for (let i = 1; i <= dNumber; i++) {\r\n    rolls.push(getRandomIntInclusive(1, dSide))\r\n    result += rolls[rolls.length - 1]\r\n  }\r\n  result += rollMod\r\n  if (rollMod === 0) {\r\n    rollModStr = \"\"\r\n  } else if (rollMod > 0) {\r\n    rollModStr = `+${rollMod}`\r\n  } else if (rollMod < 0) {\r\n    rollModStr = `${rollMod}`\r\n  }\r\n\r\n  return {\r\n    total: result,\r\n    rolls: rolls,\r\n    rollsStr: convertRollArrayToString(rolls),\r\n    diceTypeStr: `${dNumber}d${dSide}${rollModStr}`\r\n  }\r\n}\r\n\r\n  // https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n  function getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }","export const DEFAULT_DICE_SET = [4, 6, 8, 10, 12, 20, 100]","import React, { useState } from \"react\";\r\nimport ModButton from \"./ModButton\";\r\nimport SingleDice from \"./SingleDice\";\r\nimport Backdrop from \"./Backdrop\";\r\nimport Credit from \"./Credit\";\r\nimport { generateRoll } from \"../utils/rollUtils\";\r\nimport { DEFAULT_DICE_SET } from \"../utils/config\"\r\nimport \"./css/VDice.css\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n  margin-top: 10px;\r\n  text-align: center;\r\n  line-height: 50px;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  font-size: 2em;\r\n  user-select: none;\r\n`;\r\n\r\nconst ModContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: rows;\r\n  vertical-align: middle;\r\n  @media screen and (min-width: 300px) and (max-width: 1000px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst VDice = props => {\r\n  const [dNumber, setDNumber] = useState(1);\r\n  const [rollMod, setRollMod] = useState(0);\r\n  const [rollResult, setRollResult] = useState(\"\");\r\n  const [diceArray, setDiceArray] = useState(DEFAULT_DICE_SET);\r\n\r\n  const rollSettings = {\r\n    rollMod: rollMod,\r\n    dNumber: dNumber,\r\n    rollDice: (dSide, dNumber, rollMod) => {\r\n      setRollResult(generateRoll(dSide, dNumber, rollMod));\r\n    }\r\n  };\r\n\r\n  const resetDiceSet = () => {\r\n    setDiceArray(DEFAULT_DICE_SET);\r\n  };\r\n\r\n  return (\r\n    <div className=\"VDice\">\r\n      <Title>Virtual dice</Title>\r\n      <div className=\"RollResults\">\r\n        <p>{rollResult.diceTypeStr}</p>\r\n        <p id=\"DiceTotal\">{rollResult.total}</p>\r\n        <p id=\"DiceRolls\">{rollResult.rollsStr}</p>\r\n      </div>\r\n      {diceArray.map(element => (\r\n        <SingleDice dSide={element} rollSettings={rollSettings}></SingleDice>\r\n      ))}\r\n      <ModContainer>\r\n        <ModButton\r\n          name={\"Set number of dice\"}\r\n          value={dNumber}\r\n          cbValue={setDNumber}\r\n          min={1}\r\n        ></ModButton>\r\n        <ModButton\r\n          name={\"Set roll modification\"}\r\n          value={rollMod}\r\n          cbValue={setRollMod}\r\n          min={false}\r\n        ></ModButton>\r\n      </ModContainer>\r\n      <Backdrop />\r\n      <Credit />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VDice;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SelectViewContainer = styled.div`\r\n  display: flexbox;\r\n  flex-direction: rows;\r\n  vertical-align: middle;\r\n  padding: 5px;\r\n  width: 50%;\r\n`;\r\n\r\nconst ViewButton = styled.div`\r\n  background: black;\r\n  border-radius: 2px;\r\n  border: 2px white solid;\r\n  padding: 10px;\r\n  width: 100px;\r\n  :hover {\r\n    background: white;\r\n    color: black;\r\n    border: 2px black solid;\r\n  }\r\n`;\r\n\r\nconst SelectView = props => {\r\n  return (\r\n    <SelectViewContainer>\r\n      <ViewButton>Dice roll</ViewButton>\r\n      <ViewButton>History</ViewButton>\r\n    </SelectViewContainer>\r\n  );\r\n};\r\n\r\nexport default SelectView;\r\n","import './App.css';\r\nimport VDice from './components/VDice'\r\nimport SelectView from './components/SelectView'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <SelectView></SelectView> */}\r\n      <VDice></VDice>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}